services:
  postgres:
    image: nhost/postgres:16.4-20240909-1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: '${DB_PASSWORD}'
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - postgres_network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    restart: always
    healthcheck:
      test:
        - CMD-SHELL
        - 'pg_isready'

  pgbouncer:
    image: edoburu/pgbouncer
    environment:
      DB_USER: postgres
      DB_PASSWORD: '${DB_PASSWORD}'
      DB_NAME: postgres
      DB_HOST: postgres
    ports:
      - "6432:6432"  # PgBouncer exposed to the internet
    volumes:
      - ./pgbouncer-config:/etc/pgbouncer  # Optional, if you want to customize later
    networks:
      - postgres_network
      - traefik-public
    command: "sh -c \"mkdir -p /var/log/pgbouncer && pgbouncer /etc/pgbouncer/pgbouncer.ini\"\n"
    healthcheck:
      test:
        - CMD-SHELL
        - 'pg_isready -h postgres -d postgres'
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      update_config:
        parallelism: 1
        delay: 10s
      replicas: 1
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M


# Always explicitly name the volumes and networks, or they will be named after the folder name with 'docker compose convert'
networks:
  postgres_network:
    driver: overlay
    name: postgres-stack_postgres_network
  traefik-public:
    external: true  # Existing public network you mentioned

volumes:
  postgres_data: 
    external: true  # For safety, create this volume manually


# Should use docker exec -it <pgbouncer-container-id> kill -SIGHUP 1 after updating any pgbouncer data
